package main

func main() {

}

type Rectangle struct {
	Width, Height int
}

// 固定大小的类型优先直接传递值给函数，而不是传递指针.
// !这里我们讨论的是整数、浮点数、小型结构体以及（小型）数组。
// 这类类型的内存占用是固定的，通常在很多系统上与指针的大小相当，甚至更小.
// !传递值的速度很快，而且很少比传递指针慢
//
// 这可能会因为复制而显得有悖常理，但原因如下：
//
// 复制少量数据非常高效，通常比使用指针时所需的间接操作更快。
// 当值直接传递时，垃圾收集器的工作量会减少，因为它需要跟踪的指针引用更少。
// 通过值传递的数据在内存中往往存储得更紧密，这使得CPU能够更快地访问数据。
// 你很少会遇到一个足够大的结构体，以至于通过指针传递对其有利。
// !只有在基准测试显示指针传递有明显优势时，才考虑使用指针。
// 一点点性能提升通常不值得牺牲清晰度。
func CalculateArea(r Rectangle) int {
	return r.Width * r.Height
}
