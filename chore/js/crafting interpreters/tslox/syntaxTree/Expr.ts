// Generated by generateAst.ts

import { type IToken } from '../types'

export interface ExprVisitor<R> {
  visitAssignExpr(assign: Assign): R
  visitBinaryExpr(binary: Binary): R
  visitCallExpr(call: Call): R
  visitGetExpr(get: Get): R
  visitGroupingExpr(grouping: Grouping): R
  visitLiteralExpr(literal: Literal): R
  visitLogicalExpr(logical: Logical): R
  visitSetExprExpr(setexpr: SetExpr): R
  visitSuperExprExpr(superexpr: SuperExpr): R
  visitThisExprExpr(thisexpr: ThisExpr): R
  visitUnaryExpr(unary: Unary): R
  visitVariableExprExpr(variableexpr: VariableExpr): R
}

export abstract class Expr {
  abstract accept<R>(visitor: ExprVisitor<R>): R
}

export class Assign extends Expr {
  readonly name: IToken
  readonly value: Expr

  constructor(name: IToken, value: Expr) {
    super()
    this.name = name
    this.value = value
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitAssignExpr(this)
  }
}

export class Binary extends Expr {
  readonly left: Expr
  readonly operator: IToken
  readonly right: Expr

  constructor(left: Expr, operator: IToken, right: Expr) {
    super()
    this.left = left
    this.operator = operator
    this.right = right
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitBinaryExpr(this)
  }
}

export class Call extends Expr {
  readonly callee: Expr
  readonly paren: IToken
  readonly args: Expr[]

  constructor(callee: Expr, paren: IToken, args: Expr[]) {
    super()
    this.callee = callee
    this.paren = paren
    this.args = args
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitCallExpr(this)
  }
}

export class Get extends Expr {
  readonly obj: Expr
  readonly name: IToken

  constructor(obj: Expr, name: IToken) {
    super()
    this.obj = obj
    this.name = name
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitGetExpr(this)
  }
}

export class Grouping extends Expr {
  readonly expression: Expr

  constructor(expression: Expr) {
    super()
    this.expression = expression
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitGroupingExpr(this)
  }
}

export class Literal extends Expr {
  readonly value: any

  constructor(value: any) {
    super()
    this.value = value
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitLiteralExpr(this)
  }
}

export class Logical extends Expr {
  readonly left: Expr
  readonly operator: IToken
  readonly right: Expr

  constructor(left: Expr, operator: IToken, right: Expr) {
    super()
    this.left = left
    this.operator = operator
    this.right = right
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitLogicalExpr(this)
  }
}

export class SetExpr extends Expr {
  readonly obj: Expr
  readonly name: IToken
  readonly value: Expr

  constructor(obj: Expr, name: IToken, value: Expr) {
    super()
    this.obj = obj
    this.name = name
    this.value = value
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitSetExprExpr(this)
  }
}

export class SuperExpr extends Expr {
  readonly keyword: IToken
  readonly method: IToken

  constructor(keyword: IToken, method: IToken) {
    super()
    this.keyword = keyword
    this.method = method
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitSuperExprExpr(this)
  }
}

export class ThisExpr extends Expr {
  readonly keyword: IToken

  constructor(keyword: IToken) {
    super()
    this.keyword = keyword
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitThisExprExpr(this)
  }
}

export class Unary extends Expr {
  readonly operator: IToken
  readonly right: Expr

  constructor(operator: IToken, right: Expr) {
    super()
    this.operator = operator
    this.right = right
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitUnaryExpr(this)
  }
}

export class VariableExpr extends Expr {
  readonly name: IToken

  constructor(name: IToken) {
    super()
    this.name = name
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitVariableExprExpr(this)
  }
}

