// Generated by generateAst.ts

import { type IToken } from '../types'

export interface ExprVisitor<R> {
  visitBinaryExpr(binary: Binary): R
  visitGroupingExpr(grouping: Grouping): R
  visitLiteralExpr(literal: Literal): R
  visitUnaryExpr(unary: Unary): R
  visitVariableExprExpr(variableexpr: VariableExpr): R
}

export abstract class Expr {
  abstract accept<R>(visitor: ExprVisitor<R>): R
}

export class Binary extends Expr {
  readonly left: Expr
  readonly operator: IToken
  readonly right: Expr

  constructor(left: Expr, operator: IToken, right: Expr) {
    super()
    this.left = left
    this.operator = operator
    this.right = right
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitBinaryExpr(this)
  }
}

export class Grouping extends Expr {
  readonly expression: Expr

  constructor(expression: Expr) {
    super()
    this.expression = expression
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitGroupingExpr(this)
  }
}

export class Literal extends Expr {
  readonly value: any

  constructor(value: any) {
    super()
    this.value = value
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitLiteralExpr(this)
  }
}

export class Unary extends Expr {
  readonly operator: IToken
  readonly right: Expr

  constructor(operator: IToken, right: Expr) {
    super()
    this.operator = operator
    this.right = right
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitUnaryExpr(this)
  }
}

export class VariableExpr extends Expr {
  readonly name: IToken

  constructor(name: IToken) {
    super()
    this.name = name
  }

  override accept<R>(visitor: ExprVisitor<R>): R {
    return visitor.visitVariableExprExpr(this)
  }
}
