// Generated by generateAst.ts

import { type IToken } from '../types'
import { type Expr } from './Expr'

export interface StmtVisitor<R> {
  visitExpressionStmt(expression: Expression): R
  visitPrintStmt(print: Print): R
  visitVariableDeclStmt(variabledecl: VariableDecl): R
}

export abstract class Stmt {
  abstract accept<R>(visitor: StmtVisitor<R>): R
}

export class Expression extends Stmt {
  readonly expression: Expr

  constructor(expression: Expr) {
    super()
    this.expression = expression
  }

  override accept<R>(visitor: StmtVisitor<R>): R {
    return visitor.visitExpressionStmt(this)
  }
}

export class Print extends Stmt {
  readonly expression: Expr

  constructor(expression: Expr) {
    super()
    this.expression = expression
  }

  override accept<R>(visitor: StmtVisitor<R>): R {
    return visitor.visitPrintStmt(this)
  }
}

export class VariableDecl extends Stmt {
  readonly name: IToken
  readonly initializer: Expr | undefined

  constructor(name: IToken, initializer: Expr | undefined) {
    super()
    this.name = name
    this.initializer = initializer
  }

  override accept<R>(visitor: StmtVisitor<R>): R {
    return visitor.visitVariableDeclStmt(this)
  }
}
