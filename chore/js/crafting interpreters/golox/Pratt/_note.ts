/* eslint-disable max-len */

// Pratt解析器：让表达式解析变得简单
// https://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/
//
// 当涉及到表达式时，解析会变得更加棘手。
// 当涉及到中缀运算符（如+ ）、后缀运算符（如++ ，甚至是混合表达式（如?: ）时，
// !在解析到一半之前很难判断正在解析的表达式类型。
// 您可以通过递归下降来做到这一点，但这是一件苦差事。
// !您必须为每个优先级编写单独的函数（例如，JavaScript 有 17 个优先级），
// 手动处理关联性，并将您的语法涂抹在一堆解析代码中，直到很难看到为止。
//
// 为了展示 Pratt 解析器的工作原理，
// 我们将为一种名为Bantam 的小型玩具语言构建一个解析器。
// 该语言只有表达式，因为这就是 Pratt 解析真正有用的地方，但这应该足以让您相信它的有用性。
//
// 尽管 Bantam 很简单，但它具有完整的运算符：
// 前缀 ( + 、 - 、 ~ 、 ! )、后缀 ( ! )、中缀 ( + 、 - 、 * 、 / 、 ^ )，甚至还有混合条件运算符 ( ?: ：）。它具有多个优先级以及左右结合运算符。它还具有赋值、函数调用和用于分组的括号。
// 如果我们能解析这个，我们就可以解析任何东西。

// https://segmentfault.com/a/1190000041457544
// https://github.com/csr632/tdop-parser
