有一句有名的谚语告诉我们："对象是穷人的闭包"（反之亦然）。
我们的虚拟机还不支持对象，但既然有了闭包，我们就可以对其进行模拟。

// Here is the classic message-based pattern:
fun vector(x, y) {
  fun object(message) {
    fun add(other) {
      return vector(x + other("x"), y + other("y"));
    }

    if (message == "x") return x;
    if (message == "y") return y;
    if (message == "add") return add;
    print "unknown message";
  }

  return object;
}

var a = vector(1, 2);
var b = vector(3, 4);
var c = a("add")(b);
print c("x");
print c("y");

// The constructor, "vector()" returns a closure that closes over the object's
// fields. In this case, it's the "x" and "y" parameters. The closure accepts a
// single argument which is the string name of the "method" to invoke on the
// object. It supports three methods:
//
// "x" returns the vector's X coordinate. Likewise "y". "add" returns a second
// function, which is the add method. That function in turn accepts an argument
// for the other vector to add to it.
