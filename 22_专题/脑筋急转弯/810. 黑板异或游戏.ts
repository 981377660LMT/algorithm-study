function xorGame(nums: number[]): boolean {
  // Alice选时，只要数组长度为偶数他就能赢
  if (nums.length % 2 === 0) return true
  let xor = 0
  nums.forEach(num => (xor ^= num))
  // 假设此时偶数数组所有数的异或值为0，那么Alice就直接获胜
  // 如果此时偶数数组所有数的异或值不为0。得到结论：至少有 2 个以上的数使其数组的异或值不为0
  return xor === 0
}

// Alice 和 Bob 轮流从黑板上擦掉一个数字，Alice 先手
// 如果擦除一个数字后，剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家游戏失败
// 当且仅当 Alice 获胜时返回 true。
console.log(xorGame([1, 1, 2]))
// 输出: false
// 解释:
// Alice 有两个选择: 擦掉数字 1 或 2。
// 如果擦掉 1, 数组变成 [1, 2]。剩余数字按位异或得到 1 XOR 2 = 3。那么 Bob 可以擦掉任意数字，因为 Alice 会成为擦掉最后一个数字的人，她总是会输。
// 如果 Alice 擦掉 2，那么数组变成[1, 1]。剩余数字按位异或得到 1 XOR 1 = 0。Alice 仍然会输掉游戏。

// 1. 如果给定的序列异或和为 0，游戏开始时，先手直接获胜：
// 2. 如果给定序列异或和不为 0，我们需要分析，先手获胜的话，序列会满足何种性质
// 「后手必败态」意味着去掉任意数字后异或和为0。
// 去掉X[i]相当于异或一个X[i]
// 对所有i求异或
// 得式子
// XOR**(n+1)=0 即此时n为奇数 故后手必败时n为奇数 即先手必胜n为偶数
