// 树上区间并查集 RangeUnionFindOnTree/UnionFindRangeOnTree
//
// 给出一棵 n 个点的树，接下来有 m 次操作：
// 加一条从 a_i 到 b_i 的边。
// 询问两个点 u_i 和 v_i 之间是否有至少两条边不相交的路径。
//
// 考虑使用并查集维护。给树定根，设 f_i 表示 i 到根的路径中第一个未被覆盖的边。那么每次加边操作，我们就暴力跳并查集。覆盖了一条边后，将这条边对应结点的 f 与父节点合并。这样，每条边至多被覆盖一次，总复杂度 O(n\log n)。
// 使用按秩合并的并查集同样可以做到 O(n\alpha(n))。
package main

func main() {

}
