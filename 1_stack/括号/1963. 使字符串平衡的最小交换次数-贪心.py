# 给你一个字符串 s ，下标从 0 开始 ，且长度为偶数 n 。
# 字符串 恰好 由 n / 2 个开括号 '[' 和 n / 2 个闭括号 ']' 组成。

# 2 <= n <= 1e6
class Solution:
    def minSwaps(self, s: str) -> int:
        balance, swap = 0, 0
        for char in s:
            balance += 1 if char == '[' else -1
            if balance == -1:
                # 换一个'['过来,平衡度直接变成1
                balance = 1
                swap += 1
        return swap


print(Solution().minSwaps(s="]]][[["))
# 输出：2
# 解释：执行下述操作可以使字符串变成平衡字符串：
# - 交换下标 0 和下标 4 对应的括号，s = "[]][][" 。
# - 交换下标 1 和下标 5 对应的括号，s = "[[][]]" 。
# 最终字符串变成 "[[][]]" 。


# []][]]][[[[] : [1, 0, -1, 0, -1, -2, -3, -2, -1, 0, 1, 0]

# [][[]]][][[] : [1, 0, 1, 2, 1, 0, -1, 0, -1, 0, 1, 0]

# [][[]][[]][] : [1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0]
