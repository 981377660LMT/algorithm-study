// https://www.luogu.com.cn/blog/yszs/xian-duan-shu-fen-zhi

// https://www.luogu.com.cn/problem/CF938G
// 每条无向边有边权和一段作用时间区间，查询两个点之间的异或最短路。
//
// 首先考虑怎么求两个点之间的异或最短路，其实就是P4151 最大XOR和路径
// 考虑如果一颗树的话，之间的答案就是路径上所有边异或起来的值。
// 那么推广到图上去，不难想到就是多了一些环，而且这个环走一圈是没贡献的（异或为零）。所以如果你要从环的一段走向另一端，实际上只有两种走法。

// 由于异或的优秀性质，可以将看上去复杂的图论问题转化成关于每条边的线性基上问题。
// 由于不支持撤销，我们在当前dfs栈中的每个节点上保存一份副本，供下一步的处理，最多保存logn个，可以接受。

package main

func main() {

}
