package template.algo;

import template.math.LongRadix;

public class IntervalBitwiseOrExpandGroup {

    /**
     * Find how many number can be generated by bitwise or some number in interval [l,r]
     */
    public static long expand(long l, long r) {
        if (l == r) {
            return 1;
        }

        LongRadix base = new LongRadix(2);
        int[] bitsOfA = base.decompose(l);
        int[] bitsOfB = base.decompose(r);

        int since = bitsOfA.length - 1;
        while (bitsOfA[since] == bitsOfB[since]) {
            bitsOfA[since] = bitsOfB[since] = 0;
            since--;
        }

        bitsOfB[since] = 0;
        int bBits = since;
        while (bBits > 0 && bitsOfB[bBits - 1] == 0) {
            bBits--;
        }


        l = base.compose(bitsOfA);
        if ((1L << bBits) >= l) {
            return (1L << since) * 2 - l;
        }

        long ans = (1L << since) - l;
        ans += (1L << bBits);
        ans += (1L << since) - l;

        return ans;
    }
}
