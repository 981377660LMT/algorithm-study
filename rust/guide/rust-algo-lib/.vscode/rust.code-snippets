{
  "input": {
    "scope": "rust",
    "prefix": ["run_with_io", "input", "scanner", "io"],
    "body": [
      "// ---------- begin scannner ----------",
      "#[allow(dead_code)]",
      "mod scanner {",
      "\t\tuse std::str::FromStr;",
      "\t\tpub struct Scanner<'a> {",
      "\t\t\t\tit: std::str::SplitWhitespace<'a>,",
      "\t\t}",
      "\t\timpl<'a> Scanner<'a> {",
      "\t\t\t\tpub fn new(s: &'a str) -> Scanner<'a> {",
      "\t\t\t\t\t\tScanner {",
      "\t\t\t\t\t\t\t\tit: s.split_whitespace(),",
      "\t\t\t\t\t\t}",
      "\t\t\t\t}",
      "\t\t\t\tpub fn next<T: FromStr>(&mut self) -> T {",
      "\t\t\t\t\t\tself.it.next().unwrap().parse::<T>().ok().unwrap()",
      "\t\t\t\t}",
      "\t\t\t\tpub fn next_bytes(&mut self) -> Vec<u8> {",
      "\t\t\t\t\t\tself.it.next().unwrap().bytes().collect()",
      "\t\t\t\t}",
      "\t\t\t\tpub fn next_chars(&mut self) -> Vec<char> {",
      "\t\t\t\t\t\tself.it.next().unwrap().chars().collect()",
      "\t\t\t\t}",
      "\t\t\t\tpub fn next_vec<T: FromStr>(&mut self, len: usize) -> Vec<T> {",
      "\t\t\t\t\t\t(0..len).map(|_| self.next()).collect()",
      "\t\t\t\t}",
      "\t\t}",
      "}",
      "// ---------- end scannner ----------",
      "",
      "pub fn run_with_io(f: impl Fn(&mut scanner::Scanner, &mut std::io::BufWriter<std::io::Stdout>)) {",
      "\t\tuse std::io::Read;",
      "\t\tlet mut s = String::new();",
      "\t\tstd::io::stdin().read_to_string(&mut s).unwrap();",
      "\t\tlet mut sc = scanner::Scanner::new(&s);",
      "\t\tlet out = std::io::stdout();",
      "\t\tlet mut out = std::io::BufWriter::new(out);",
      "\t\tf(&mut sc, &mut out);",
      "}",
      "",
      "#[allow(unused)]",
      "fn demo() {",
      "\t\tuse std::io::Write; // !for writeln!",
      "",
      "\t\trun_with_io(|sc, out| {",
      "\t\t\t\tlet n: usize = sc.next();",
      "\t\t\t\twriteln!(out, \"{}\", n).ok();",
      "\t\t});",
      "}",
      ""
    ],
    "description": "input for rust"
  }
}
