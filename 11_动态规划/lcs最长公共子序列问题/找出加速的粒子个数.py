# 一些科学家在研究X粒子的特性，通常情况下，
# X粒子在经过加速装置后拥有的速度均为V，
# 但是加热后，某些粒子的特性发生了变化,
# 在相同情况下经过加速装置后拥有的速度变得大于V了(变化后的速度不一定相同），
# 于是科学家们决定研究这些特别的粒子.
# 科学家们对n个粒子做了特殊处理，为其从1到n分别编号，
# 为了找出是哪些粒子的特性发生了变化(导致速度变化)，
# 他们准备让这些粒子依次通过一段相同长度的距离，
# 速度越高的粒子通过这段距离所需的时间越短，由于技术问题，
# 只能依次检测到粒子发射顺序和到达终点的顺序(没有两个粒子同时被发射或同时到达)，
# 请你通过这些数据计算出至少有多少个粒子特性发生了变化(即速度大于通常情况)。

# 例如:
# 5
# 5 4 3 2 1
# 1 5 3 4 2


# !直接对s编号然后在p里面求最长上升子序列的长度(即求LCS),
# !然后认为答案等于len(p)-l这种做法是错误的,
# 反例:
# 5
# 1 2 3 4 5
# 3 4 5 1 2
# 输出:3

# !如果只是求最长上升子序列的话，那就默认了存在减速的情况与题目说的只存在加速的情况矛盾。
# 正确做法

from typing import List


def solve(n: int, starts: List[int], ends: List[int]) -> int:
    """至少有几个粒子加速了"""
    indexMap = {num: i for i, num in enumerate(ends)}
    last = -1
    res = 0
    for num in starts:
        rank = indexMap[num]
        if last < rank:
            last = rank
        else:
            res += 1  # 如果发现rank比last大，说明至少有一个粒子发生了加速

    return res


print(solve(5, [1, 2, 3, 4, 5], [3, 4, 5, 1, 2]))
