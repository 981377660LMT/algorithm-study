# 六个城市
# 从1到2的交通工具最多容纳A人
# 从2到3的交通工具最多容纳B人
# ...
# 从5到6的交通工具最多容纳E人

# 现在n个人从1出发，要到达6，问最少需要多少时间

# !木桶效应(bottleneck)
# !最慢的那次转移每次只能转移min人 因此可以把人分成group=ceil(n/min)组
# 第一个group 5分钟到
# 第二个group 5+1分钟到
# ...
# 第n个group 5+n-1分钟到
from math import ceil
import sys

sys.setrecursionlimit(int(1e6))
input = lambda: sys.stdin.readline().rstrip("\r\n")
MOD = 998244353
INF = int(4e18)

# 電車：都市 1 から 2 まで 1 分で移動する。1 つの電車には A 人まで乗ることができる。
# バス：都市 2 から 3 まで 1 分で移動する。1 つのバスには B 人まで乗ることができる。
# タクシー：都市 3 から 4 まで 1 分で移動する。1 つのタクシーには C 人まで乗ることができる。
# 飛行機：都市 4 から 5 まで 1 分で移動する。1 つの飛行機には D 人まで乗ることができる。
# 船：都市 5 から 6 までを 1 分で移動する。1 つの船には E 人まで乗ることができる。
# それぞれの交通機関は、各整数時刻 (0,1,2,3,...) に、都市から出発します。
# いま、N 人のグループが都市 1 におり、全員都市 6 まで移動したいです。
# 全員が都市 6 に到着するまでに最短で何分かかるでしょうか？
if __name__ == "__main__":
    n = int(input())
    nums = [int(input()) for _ in range(5)]
    min_ = min(nums)
    group = ceil(n / min_)
    print(5 + group - 1)
